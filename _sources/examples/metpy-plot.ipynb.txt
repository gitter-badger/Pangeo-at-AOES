{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MetPy Plots\n",
    "\n",
    "#### Contains functionality for making a variety of meteorological plots:\n",
    "\n",
    "### Classes:\n",
    "`BarbPlot(*args, **kwargs)` Make plots of wind barbs on a map with traits to refine the look of plotted elements.\n",
    "\n",
    "`ContourPlot(*args, **kwargs)` Make contour plots by defining specific traits.\n",
    "\n",
    "`FilledContourPlot(*args, **kwargs)` Make color-filled contours plots by defining appropriate traits.\n",
    "\n",
    "`Hodograph([ax, component_range])` Make a hodograph of wind data.\n",
    "\n",
    "`ImagePlot(*args, **kwargs)` Make raster image using imshow for satellite or colored image.\n",
    "\n",
    "`MapPanel(*args, **kwargs)` Set figure related elements for an individual panel.\n",
    "\n",
    "`PanelContainer(*args, **kwargs)` Collects panels and set complete figure related settings (e.g., figsize).\n",
    "\n",
    "`PlotScalar(*args, **kwargs)` Defines the common elements of 2D scalar plots for single scalar value fields.\n",
    "\n",
    "`PlotVector(*args, **kwargs)` Defines common elements for 2D vector plots.\n",
    "\n",
    "`Plots2D(*args, **kwargs)` The highest level class related to plotting 2D data.\n",
    "\n",
    "`SkewT([fig, rotation, subplot, rect, aspect])` Make Skew-T log-P plots of data.\n",
    "\n",
    "`StationPlot(ax, x, y[, fontsize, spacing, â€¦])` Make a standard meteorological station plot.\n",
    "\n",
    "`StationPlotLayout` make a layout to encapsulate plotting using StationPlot.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    ".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import xarray as xr\n",
    "\n",
    "import metpy.calc as calc\n",
    "from metpy.plots import ContourPlot, ImagePlot, MapPanel, PanelContainer\n",
    "from metpy.units import units\n",
    "\n",
    "from datetime import datetime\n",
    "#from netCDF4 import Dataset, date2index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 1: Plotting a map of gridded data\n",
    "\n",
    "All of the plotting functionality is built on top of Matplotlib.\n",
    "\n",
    "Also, the map drawing features come from CartoPy (which was originally developed by the UK Met Office!)\n",
    "\n",
    "Here we use ERA5 reanalysis over the US - a patriotic date in 2018:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "epath = '/Users/dirmeyer/MyFiles/Data Sets/ERA5/'\n",
    "sfcfile = epath+'ea_oper_an+fc_daily_MJJAS_2018.nc4'\n",
    "#sfcdata = Dataset(sfcfile,\"r\")\n",
    "\n",
    "sfcx = xr.open_dataset(sfcfile)\n",
    "dt = datetime(2018, 7, 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a contour plot of temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "contour = ContourPlot()\n",
    "contour.data = sfcx\n",
    "contour.field = 't2m'\n",
    "contour.time = dt\n",
    "contour.linecolor = 'maroon'\n",
    "contour.linewidth = 1\n",
    "contour.contours = 8\n",
    "contour.clabels = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an image plot of dew point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# t2mu = sfcx.t2m.sel(time=dt) * units.kelvin\n",
    "# d2mu = sfcx.d2m.sel(time=dt) * units.kelvin\n",
    "# rh2m = calc.relative_humidity_from_dewpoint(t2mu, d2mu)\n",
    "\n",
    "img = ImagePlot()\n",
    "img.data = sfcx\n",
    "img.time = dt\n",
    "img.field = 'd2m'\n",
    "img.colormap = 'summer'\n",
    "#img.colorbar = 'True'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the data on a map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "panel = MapPanel()\n",
    "#panel.area = 'us'\n",
    "panel.layout = (1, 1, 1)\n",
    "panel.area = (-125.1, -66, 24.4, 50.7)\n",
    "#panel.projection = 'mer'\n",
    "panel.layers = ['coastline', 'borders', 'states', 'ocean', 'land']\n",
    "panel.title = 'ERA5 Daily Mean Tempeature (contours) and Dew Point (shading)'\n",
    "panel.plots = [contour, img]\n",
    "\n",
    "pc = PanelContainer()\n",
    "pc.size = (20, 15)\n",
    "pc.panels = [panel]\n",
    "pc.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
