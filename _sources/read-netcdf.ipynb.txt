{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read a netcdf file and make a contour plot of the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we demonstrate:\n",
    "1. How to read a netcdf file in Python using `xarray` \n",
    "2. How to make a contour plot of the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "We will read CMIP5 data for surface air temperature (tas) from the RCP8.5 scenario produced by the NCAR/CCSM4 model. For this example, we will read teh first ensemble member.\n",
    "\n",
    "The data are located on the COLA severs in the following directory:\n",
    "```/shared/cmip5/data/rcp45/atmos/mon/Amon/tas/NCAR.CCSM4/r1i1p1/```\n",
    "\n",
    "The filename is:\n",
    "```tas_Amon_CCSM4_rcp45_r1i1p1_210101-229912.nc```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python import statements\n",
    "You must first import the Python packages you wish to use. \n",
    "This is a common set of basic import statments you can start with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import xarray as xr\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set the path and filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path='/shared/cmip5/data/rcp45/atmos/mon/Amon/tas/NCAR.CCSM4/r1i1p1/'\n",
    "fname='tas_Amon_CCSM4_rcp45_r1i1p1_210101-229912.nc'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read the data using `xarray` `open_dataset` http://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds=xr.open_dataset(path+fname)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When you read in data using `xarray`, it creates an object called an `xarray.Dataset` which consists of your data and all its metadata. If we print out our `Dataset` which is called `ds`, its similar to doing a `ncdump -h` on a netcdf file. You can see all the dimensions, size, and attributes of the data in the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:    (bnds: 2, lat: 192, lon: 288, time: 2388)\n",
       "Coordinates:\n",
       "  * time       (time) object 2101-01-16 12:00:00 ... 2299-12-16 12:00:00\n",
       "  * lat        (lat) float64 -90.0 -89.06 -88.12 -87.17 ... 88.12 89.06 90.0\n",
       "  * lon        (lon) float64 0.0 1.25 2.5 3.75 5.0 ... 355.0 356.2 357.5 358.8\n",
       "    height     float64 ...\n",
       "Dimensions without coordinates: bnds\n",
       "Data variables:\n",
       "    time_bnds  (time, bnds) object ...\n",
       "    lat_bnds   (lat, bnds) float64 ...\n",
       "    lon_bnds   (lon, bnds) float64 ...\n",
       "    tas        (time, lat, lon) float32 ...\n",
       "Attributes:\n",
       "    institution:                  NCAR (National Center for Atmospheric Resea...\n",
       "    institute_id:                 NCAR\n",
       "    experiment_id:                rcp45\n",
       "    source:                       CCSM4\n",
       "    model_id:                     CCSM4\n",
       "    forcing:                      Sl GHG SS Ds SA BC MD OC Oz AA\n",
       "    parent_experiment_id:         historical\n",
       "    parent_experiment_rip:        r1i1p1\n",
       "    branch_time:                  21.0\n",
       "    contact:                      cesm_data@ucar.edu\n",
       "    comment:                      CESM home page: http://www.cesm.ucar.edu\n",
       "    references:                   Gent P. R., et.al. 2011: The Community Clim...\n",
       "    initialization_method:        1\n",
       "    physics_version:              1\n",
       "    tracking_id:                  64eaa5ca-4b55-4167-94e4-e8b827deb23e\n",
       "    acknowledgements:             The CESM project is supported by the Nation...\n",
       "    cesm_casename:                b40.rcp4_5.2300.001\n",
       "    cesm_repotag:                 cesm1_0_beta08\n",
       "    cesm_compset:                 BRCP45CN\n",
       "    resolution:                   f09_g16 (0.9x1.25_gx1v6)\n",
       "    forcing_note:                 Additional information on the external forc...\n",
       "    processed_by:                 strandwg on mirage3 at 20120603  -121341.236\n",
       "    processing_code_information:  Last Changed Rev: 837 Last Changed Date: 20...\n",
       "    product:                      output\n",
       "    experiment:                   RCP4.5\n",
       "    frequency:                    mon\n",
       "    creation_date:                2012-06-03T18:13:42Z\n",
       "    history:                      2012-06-03T18:13:42Z CMOR rewrote data to c...\n",
       "    Conventions:                  CF-1.4\n",
       "    project_id:                   CMIP5\n",
       "    table_id:                     Table Amon (12 January 2012) 4996d487f7a657...\n",
       "    title:                        CCSM4 model output prepared for CMIP5 RCP4.5\n",
       "    parent_experiment:            historical\n",
       "    modeling_realm:               atmos\n",
       "    realization:                  1\n",
       "    cmor_version:                 2.8.1</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:    (bnds: 2, lat: 192, lon: 288, time: 2388)\n",
       "Coordinates:\n",
       "  * time       (time) object 2101-01-16 12:00:00 ... 2299-12-16 12:00:00\n",
       "  * lat        (lat) float64 -90.0 -89.06 -88.12 -87.17 ... 88.12 89.06 90.0\n",
       "  * lon        (lon) float64 0.0 1.25 2.5 3.75 5.0 ... 355.0 356.2 357.5 358.8\n",
       "    height     float64 ...\n",
       "Dimensions without coordinates: bnds\n",
       "Data variables:\n",
       "    time_bnds  (time, bnds) object ...\n",
       "    lat_bnds   (lat, bnds) float64 ...\n",
       "    lon_bnds   (lon, bnds) float64 ...\n",
       "    tas        (time, lat, lon) float32 ...\n",
       "Attributes:\n",
       "    institution:                  NCAR (National Center for Atmospheric Resea...\n",
       "    institute_id:                 NCAR\n",
       "    experiment_id:                rcp45\n",
       "    source:                       CCSM4\n",
       "    model_id:                     CCSM4\n",
       "    forcing:                      Sl GHG SS Ds SA BC MD OC Oz AA\n",
       "    parent_experiment_id:         historical\n",
       "    parent_experiment_rip:        r1i1p1\n",
       "    branch_time:                  21.0\n",
       "    contact:                      cesm_data@ucar.edu\n",
       "    comment:                      CESM home page: http://www.cesm.ucar.edu\n",
       "    references:                   Gent P. R., et.al. 2011: The Community Clim...\n",
       "    initialization_method:        1\n",
       "    physics_version:              1\n",
       "    tracking_id:                  64eaa5ca-4b55-4167-94e4-e8b827deb23e\n",
       "    acknowledgements:             The CESM project is supported by the Nation...\n",
       "    cesm_casename:                b40.rcp4_5.2300.001\n",
       "    cesm_repotag:                 cesm1_0_beta08\n",
       "    cesm_compset:                 BRCP45CN\n",
       "    resolution:                   f09_g16 (0.9x1.25_gx1v6)\n",
       "    forcing_note:                 Additional information on the external forc...\n",
       "    processed_by:                 strandwg on mirage3 at 20120603  -121341.236\n",
       "    processing_code_information:  Last Changed Rev: 837 Last Changed Date: 20...\n",
       "    product:                      output\n",
       "    experiment:                   RCP4.5\n",
       "    frequency:                    mon\n",
       "    creation_date:                2012-06-03T18:13:42Z\n",
       "    history:                      2012-06-03T18:13:42Z CMOR rewrote data to c...\n",
       "    Conventions:                  CF-1.4\n",
       "    project_id:                   CMIP5\n",
       "    table_id:                     Table Amon (12 January 2012) 4996d487f7a657...\n",
       "    title:                        CCSM4 model output prepared for CMIP5 RCP4.5\n",
       "    parent_experiment:            historical\n",
       "    modeling_realm:               atmos\n",
       "    realization:                  1\n",
       "    cmor_version:                 2.8.1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to access just the surface air tempeature (tas) data itself, without all the gloal attributes, you can do that by supplying the name of the variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.DataArray &#x27;tas&#x27; (time: 2388, lat: 192, lon: 288)&gt;\n",
       "[132046848 values with dtype=float32]\n",
       "Coordinates:\n",
       "  * time     (time) object 2101-01-16 12:00:00 ... 2299-12-16 12:00:00\n",
       "  * lat      (lat) float64 -90.0 -89.06 -88.12 -87.17 ... 87.17 88.12 89.06 90.0\n",
       "  * lon      (lon) float64 0.0 1.25 2.5 3.75 5.0 ... 355.0 356.2 357.5 358.8\n",
       "    height   float64 ...\n",
       "Attributes:\n",
       "    standard_name:     air_temperature\n",
       "    long_name:         Near-Surface Air Temperature\n",
       "    units:             K\n",
       "    original_name:     TREFHT\n",
       "    comment:           TREFHT no change\n",
       "    cell_methods:      time: mean (interval: 30 days)\n",
       "    cell_measures:     area: areacella\n",
       "    history:           2012-06-03T18:13:41Z altered by CMOR: Treated scalar d...\n",
       "    associated_files:  baseURL: http://cmip-pcmdi.llnl.gov/CMIP5/dataLocation...</pre>"
      ],
      "text/plain": [
       "<xarray.DataArray 'tas' (time: 2388, lat: 192, lon: 288)>\n",
       "[132046848 values with dtype=float32]\n",
       "Coordinates:\n",
       "  * time     (time) object 2101-01-16 12:00:00 ... 2299-12-16 12:00:00\n",
       "  * lat      (lat) float64 -90.0 -89.06 -88.12 -87.17 ... 87.17 88.12 89.06 90.0\n",
       "  * lon      (lon) float64 0.0 1.25 2.5 3.75 5.0 ... 355.0 356.2 357.5 358.8\n",
       "    height   float64 ...\n",
       "Attributes:\n",
       "    standard_name:     air_temperature\n",
       "    long_name:         Near-Surface Air Temperature\n",
       "    units:             K\n",
       "    original_name:     TREFHT\n",
       "    comment:           TREFHT no change\n",
       "    cell_methods:      time: mean (interval: 30 days)\n",
       "    cell_measures:     area: areacella\n",
       "    history:           2012-06-03T18:13:41Z altered by CMOR: Treated scalar d...\n",
       "    associated_files:  baseURL: http://cmip-pcmdi.llnl.gov/CMIP5/dataLocation..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['tas']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make a very simple contour plot to convince ourselves that we indeed have surface air temperature data. \n",
    "1. We will use the `matplotlib` `plt.contourf` function for a filed contour plot.  It works very similar to Matlab plotting functions.  \n",
    "2. We can only make a contour plot with 2-D data (lat,lon) and we have 3-D (time,lat,lon), so we will need to access a single time using brackets notation. \n",
    "3. We will want to add a colorbar to see that values are reasonable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7ff094ce2f28>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.contourf(ds['tas'][0,:,:])\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a very simple plot, but it looks like we have global temperature data.  More details on how to plot maps, make nice lables, and colors, can be found in other examples."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "climpred-dev",
   "language": "python",
   "name": "climpred-dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
